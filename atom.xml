<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nameeo.github.io/"/>
  <updated>2019-01-12T16:54:36.124Z</updated>
  <id>https://nameeo.github.io/</id>
  
  <author>
    <name>nameEO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Summernote 에디터 요약</title>
    <link href="https://nameeo.github.io/2019/01/12/summernote-summary/"/>
    <id>https://nameeo.github.io/2019/01/12/summernote-summary/</id>
    <published>2019-01-12T14:11:38.000Z</published>
    <updated>2019-01-12T16:54:36.124Z</updated>
    
    <content type="html"><![CDATA[<p>하던 일 중에 간단하게 글을 편집할 수 있는 에디터가 필요한 화면이 있어서 에디터를 찾다가 <a href="https://summernote.org/" target="_blank" rel="noopener">Summernote</a>를 발견하게 되었다.</p><blockquote><p>예전에 봤던 에디터에 대한 기억을 되살려 찾아갔더니 좀 오래되어 보여서 포기하기로 했다.</p><ul><li>Naver <a href="https://github.com/naver/smarteditor2" target="_blank" rel="noopener">SmartEditor2</a> - 3.0 버전은 서비스형</li><li>Daum <a href="https://github.com/kakao/DaumEditor" target="_blank" rel="noopener">DaumEditor</a> - DEPRECATED</li></ul></blockquote><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><img src="/2019/01/12/summernote-summary/download-compiled.png" title="download_compiled"><p><a href="https://summernote.org/getting-started/" target="_blank" rel="noopener">Getting started</a> 페이지에서 <code>Download compiled</code>를 클릭해서 다운받은 후 프로젝트 적당한 곳에 압축을 풀고 배치한다.</p><p>사용할 페이지에 스크립트와 링크를 추가한다. <code>jQuery</code> 와 <code>Bootstrap 3</code>가 필요하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- include libraries(jQuery, bootstrap) --&gt;</span><br><span class="line">&lt;link href=&quot;http://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- include summernote css/js --&gt;</span><br><span class="line">&lt;link href=&quot;http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.11/summernote.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.11/summernote.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><code>Bootstrap 4</code>는 베타 버전으로 지원한다. 파일을 추가할 때 기존의 파일 대신 <code>-bs4</code>로 끝나는 파일을 사용하면 된다.</li><li><code>Bootstrap</code> 의존성이 없는 버전을 베타 버전으로 지원한다. <code>-lite</code>로 끝나는 파일이다.</li></ul><h4 id="언어변경"><a href="#언어변경" class="headerlink" title="언어변경"></a>언어변경</h4><p>에디터 언어를 변경할 수 있다. <code>lang</code>폴더에서 원하는 언어파일을 추가한다. 한국어로 세팅했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- include summernote-ko-KR --&gt;</span><br><span class="line">&lt;script src=&quot;lang/summernote-ko-KR.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="사용"><a href="#사용" class="headerlink" title="사용"></a>사용</h2><p>이제 몇 줄만 쓰면 바로 에디터를 배치할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea id=&quot;summernote&quot;&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">$(function() &#123;</span><br><span class="line">  $(&apos;#summernote&apos;).summernote(&#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    lang: &apos;ko-KR&apos; // 언어 세팅</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>무조건 <code>textarea</code> 태그를 사용할 필요는 없지만 <code>textarea</code> 태그를 사용하면 <code>form</code> 태그 안에 배치했을 시 <strong>submit</strong> 할 때 에디터 내용이 같이 전송되는 것 같다.</p><blockquote><p>잠깐 찾아보니 에디터에서 편집할 때 원래 textarea를 숨겨놓고 내용을 똑같이 업데이트 하고 있다. (적용되어 있던 <code>display: none</code> 스타일을 제거해서 보이게 함)<br><img src="/2019/01/12/summernote-summary/editor-hide-textarea.png" title="editor-hide-textarea"></p></blockquote><p>에디터 내용을 읽거나 쓸 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// get</span><br><span class="line">var markupStr = $(&apos;#summernote&apos;).summernote(&apos;code&apos;);</span><br><span class="line"></span><br><span class="line">// set</span><br><span class="line">var markupStr = &apos;hello world&apos;;</span><br><span class="line">$(&apos;#summernote&apos;).summernote(&apos;code&apos;, markupStr);</span><br><span class="line"></span><br><span class="line">// 페이지를 렌더링 할 때 textarea 태그에 값을 넣어서 바로 불러올 수도 있는 것 같다.</span><br><span class="line">// PHP코드라면...</span><br><span class="line">// &lt;textarea id=&quot;summernote&quot;&gt;&lt;?= $contents ?&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><blockquote><p>기본 상태에서 이미지를 추가하면 <a href="https://en.wikipedia.org/wiki/Data_URI_scheme" target="_blank" rel="noopener">Data URI scheme</a>으로 저장되기 때문에 이 상태로 에디터를 실사용하기에는 무리가 있다. Data URI가 포함된 글 내용을 Summernote에 불러올 때 매우 느려진다. 웬만하면 따로 이미지 업로드 로직을 추가해서 쓰는게 좋을 것 같다.<br><img src="/2019/01/12/summernote-summary/data-uri.png" title="data-uri"></p></blockquote><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><p><a href="http://son10001.blogspot.com/2017/05/c-webform-wysiwyg-editor-summernote.html" target="_blank" rel="noopener">C#, WebForm : 위지윅 에디터 (Wysiwyg Editor) 썸머노트(summernote)</a><br><a href="https://blog.naver.com/kim_sewoong/220762759924" target="_blank" rel="noopener">13. Summernote 사용법</a><br><a href="http://kimsg.tistory.com/237" target="_blank" rel="noopener">summernote 에디터 (사용법)</a><br><a href="http://html5around.com/wordpress/tutorials/summernote-tutorial/" target="_blank" rel="noopener">SUMMERNOTE 적용해보기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;하던 일 중에 간단하게 글을 편집할 수 있는 에디터가 필요한 화면이 있어서 에디터를 찾다가 &lt;a href=&quot;https://summernote.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Summernote&lt;/a&gt;를 발견하게 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018년 회고 비슷한 것</title>
    <link href="https://nameeo.github.io/2018/12/30/retrospect-2018/"/>
    <id>https://nameeo.github.io/2018/12/30/retrospect-2018/</id>
    <published>2018-12-30T13:00:00.000Z</published>
    <updated>2018-12-30T13:08:22.065Z</updated>
    
    <content type="html"><![CDATA[<p>2017년 회고를 쓴게 언제인지도 기억나지 않는데(안썼으니까) 그래서인지 2018년을 돌아보는 이번 회고는 더욱 각별하다. 글을 쓰며 지나간 한 해를 되짚어 보는 일에서 무언가 의미있는 것은 발견하진 못했지만 그동안 겪었던 고통들을 재발견 하였다. 부산 소재의 SI 업체에 입사한지도 2년 가까이 되어가는데 그동안 별다른 성장을 하지못한 자신의 모습이 회고에 뭘 쓸지 떠올리는 동안 스쳐지나가 쓰라렸다.<br>회고를 쓰는것도 사실 내키지 않지만 새로 만든 블로그가 너무 허전해서 뭐라도 채워넣어야겠다고 다짐하며 마음을 다잡았다.</p><p>2018년 이번 한 해에 나는 코더로서 무엇을 깨닫고 얼마나 성장했는지 <del>돌아보며 나보다는 적금이 성장해서 드디어 천만원을 돌파했는데 1억 모으려면 이대로 2년에 천만원씩 18년을 더 모아야 하는지</del> 고민이 들었다.(반전있음)</p><p>여느 해와 마찬가지로 이번 한 해에도 많은 일들이 있었다. 일이 많았다. 할 수록 늘어나는 건 기분탓이 아니다. 사실 정말 바쁘게 살아가는 분들하고는 비교할 수 없겠지만 그렇다고 푹 쉰 것도 아니고 이렇게 어영부영 살다가 나이들면 죽는건가 하는 생각이 자주 들곤했다. 물론 시간이 어어 하다가 죽을 정도로 빠르게 흐르지는 않을 것이다. 어느 순간 뒤돌아 보았을 때 자신도 모르는 새에 흘러가 있는 것이다.<br><strong>이번 한 해도 크게 보면 그런 느낌이었다.</strong></p><h2 id="돌아보기"><a href="#돌아보기" class="headerlink" title="돌아보기"></a>돌아보기</h2><h4 id="1-2월"><a href="#1-2월" class="headerlink" title="1 ~ 2월"></a>1 ~ 2월</h4><h6 id="지방에-있는-자동차-기업-쪽-2차-벤더에서-프로젝트를-하며-새해를-맞이하다"><a href="#지방에-있는-자동차-기업-쪽-2차-벤더에서-프로젝트를-하며-새해를-맞이하다" class="headerlink" title="지방에 있는 자동차 기업 쪽 2차 벤더에서 프로젝트를 하며 새해를 맞이하다"></a>지방에 있는 자동차 기업 쪽 2차 벤더에서 프로젝트를 하며 새해를 맞이하다</h6><p>자동차를 만들기 위해 들어가는 부품이 있으면 그 부품을 만드는 부품도 있을 것이다. 그런 식으로 <code>원청 -&gt; 1차 벤더 -&gt; 2차 벤더 -&gt; ...</code> 에서 2차에 해당되는 부품을 만드는 회사에서 그 회사의 원청인 1차 벤더가 품질관리 해야하니 그쪽 공장에서 만드는 물건들 제조과정 추적할 수 있게 시스템 구축해놔라고 요구하는 것은 흔한 일인 것 같다. 그렇게 위쪽에서 부터 내려오는 변화의 물결이 차례차례 아래로 퍼져 나가면 겸사겸사 관련 SI 업체가 먹고살 수 있다. 계약을 체결한 SI 업체는 계약한 회사의 상황에 따라 다르겠지만 보통은 어느정도 만들어진 시스템을 가져다가 적용하면서 개발을 진행하게 된다.</p><p>그때는 겨울이라 추웠고 생산라인에는 한기가 가득했다. 발주업체에서 비용절감을 위해 현장 사무실 구석에 새까만 먼지가 묻은채로 방치되어 있던 10년 가까이 전에 단종된 PDA를 쓰겠다고 결정하는 모습을 보며 그걸 가져와서 물티슈로 눌어붙은 먼지를 닦아내는 내 마음속에도 한기가 깃들었다. 거기다 추운 겨울의 차디찬 생산라인에서 오래된 PDA는 내장배터리 수명이 다 되었는지 아니면 그냥 너무 추워서 그런지 픽 꺼지며 설치한 프로그램이 날아가곤 했다. 그러면 그걸 가져와서 다시 프로그램을 설치하고 다시 갖다놓는 일을 했다. 나중에 A/S를 받았지만 그렇다고 완전히 고쳐지진 않았다. 그리고 생산라인의 와이파이 연결도 잘 끊겼다. PDA를 들고 공장을 구석구석 돌면서 와이파이 음영지역을 찾기도 했다. 시스템이 구축되자 열심히 단말기에서 바코드를 출력해서 가져다 붙이고 PDA를 들고 다니며 스캔해야 하는 일이 생긴 현장 사람들은 새롭게 생긴 추가업무를 반기지 않았다.</p><p>사실 이런 프로젝트는 코더 입장에서 프로그래밍적으로 배우거나 할 것은 크게 없고 프로그램을 짜는 건 있던 코드 수정 정도다. 내가 맡은 대부분의 일은 생산라인에 내려가서 레거시 장비들과 씨름하는 것이었다. 실제로 돌아가는 <em>Internet Explorer 6.0</em>을 볼 수 있는 <em>윈도우 XP 임베디드</em> 위에서 돌아가는 생산라인 단말기들도 그 중 하나였다. 추위에 벌벌 떨면서 여기에 프레임워크부터 시작해서 생산라인 프로그램을 깔고 무선 인터넷을 잡고 라벨 프린터 드라이버와 무거운 프린터 본체를 낑낑대며 설치하다보면 <strong>사무직과 현장직의 단점만 겸비한</strong> 이 직업에 대해서 다시 생각해보게 된다.</p><p>그러나 애초에 거기에서 하루종일 일하는 노동자 분들을 생각하면 이 정도면 꿀빠는게 아닌가 하는 생각이 다시 고개를 들게 된다. 온갖 기계의 소음이나 용접라인의 쾌쾌한 연기냄새가 나는 공기며 커다란 프레스 설비가 나란히 서서 철판을 귀가 찢어질 듯이 쿵쿵 찍어대는 굉음을 들으며 공장을 돌다보면 더욱 그랬다.</p><p>공장 쪽 프로젝트를 진행하는 중에도 간간히 숙소에서 웹으로 모바일에서 구동되는 SPA 스타일의 웹앱을 만들었다. 공장설비 상태를 보여주는 하이브리드 앱인데 별건 아니고 jQuery를 이용해서 이미지를 숨기거나 보이거나 하는 식으로 페이지 이동 없이 구현한 것이다. 이런 간단한 앱은 jQuery로 대충 짜도 만들 수 있었지만 점점 더 복잡해지면 금방 한계가 올 것 같았다. 비슷한 내용의 조금씩 다른 앱을 여러개 만들어보며 무언가 계속해서 상태가 변화하는 앱은 조금만 기능이 늘어나도 상태를 관리하고 업데이트하는 동작에 드는 복잡성이 빠르게 증가할거라는 생각이 들었다. 그런 의미에서 React나 Vue같은 <strong>프론트엔드 프레임워크에 대한 필요성</strong>도 느꼈다. 물론 이쪽 업계는 항상 그래왔듯이 PHP, JSP, ASP.NET, jQuery 등의 전통적인 강자들이 지배할 것이다. 업무 특성 상 DOM을 직접조작할 필요가 있고 수많은 페이지를 찍어내기 위해 아직 필요하다는 생각이 든다.</p><h4 id="3-4월"><a href="#3-4월" class="headerlink" title="3 ~ 4월"></a>3 ~ 4월</h4><h6 id="바코드-출력용-웹-애플리케이션을-만들었다"><a href="#바코드-출력용-웹-애플리케이션을-만들었다" class="headerlink" title="바코드 출력용 웹 애플리케이션을 만들었다"></a>바코드 출력용 웹 애플리케이션을 만들었다</h6><p>출장기간이 끝나고 자택에서 회사로 출근하면서 새로 맡게 된 일은 처음 들었을 때는 간단한 일이라고 생각했다. 그냥 데이터를 좀 불러온 다음 바코드를 생성해서 출력하면 되는 매번 하던 일이다. 바코드는 중요하다. 어쩌면 숫자놀음에 불과할 시스템의 데이터와 실제 세상을 연결하는 방법 중 하나가 바로 바코드인 것이다. 바코드는 어디에나 있다. 특히 공장에서는 공간부터 해서 사람, 물건, 절차 등 수많은 곳에 바코드가 붙는다. 내가 맡은 일은 그 중에서도 상자에 붙일 바코드를 생성해서 산업용 라벨 프린터로 인쇄할 수 있게 하는 웹페이지를 짜는 것이었다. 바코드가 붙은 것은 이력을 가지고 추적과 관리의 대상이 되며 시스템에 기록된다. 문제가 있다면 웹으로 짜야 한다는 것이었다. 아마 회사에서는 나를 포함해 웹으로는 이런 프로그램을 짜 본 사람이 아무도 없었을 것이고 일감이란게 그렇듯이 뭐 해보면 할 수 있겠지 하며 따왔을 거라고 생각한다.</p><p>간단한 UI는 솔직히 웹으로는 금방이다. 라이브러리 좀 가져다 넣고 버튼넣고 라벨넣고 데이터그리드를 추가해서 출력할 데이터 목록을 보여주고 팝업을 띄워서 데이터를 변경할 수 있게 하고. 인쇄쪽이 문제였는데 일단 브라우저에는 기본 인쇄기능이 있다. 팝업을 띄워서 거기에 바코드를 그린 다음 인쇄창을 띄워서 출력하게 하면 된다. 그렇게 생각하고 프로그램을 짰다. 실제로 테스트 해보니 USB로 연결된 산업용 라벨 프린터가 신용카드보다 조금 더 큰 라벨에 <strong>바코드를 잘라서 일부분만 크게</strong> 출력해 주었다. 이 다음부터는 순수한 노가다였다. 조금씩 라벨 크기를 조절하며 회전시키고 이동시키며 출력했을 때 라벨에 딱 맞게 출력될 때까지 반복했다. 이 짓을 하면서 원래 이렇게 하는게 맞는지에 대해 의문이 들었다. 애초에 처음부터 이렇게 할게 아니라 다른 방법을 쓰는게 맞지 않았을까? 궁금해도 물어볼 사람도 없고 검색해봐도 딱히 나오는 건 없었다.</p><p>열심히 만들어서 배포했더니 고객에게서 라벨이 짤려서 출력된다는 피드백이 왔다. 생각해보니 뻔한 일이었다. 나는 열심히 <strong>Chrome</strong>에서 테스트했고 <strong>Internet Explorer</strong>에서는 당연히 의도한 대로 작동하지 않았다. IE는 인쇄 시스템이 Chrome과는 또 달랐다. 다시 노가다를 하며 코드는 누더기가 되어갔다.</p><p>한편 고객이 바코드를 출력하는데 사용하는 그 산업용 라벨 프린터는 다소 비싼 물건이라 지금 만드는 웹페이지를 사용할 사람들이 모두 그 프린터를 갖추지는 못하고 훨씬 싼 저가형을 쓰는 곳도 있으니 그것도 대응해달라는 소리를 들었다. 그 라벨 프린터 샘플을 받아와서 출력해보니 역시나 제대로 출력되지 않았고 프린트를 담당하는 코드를 수정했다.</p><p>그 다음엔 라벨 프린터가 없는 사람도 있어서 일반 프린터에서 출력하는 기능도 만들어 달라는 추가요청이 들어왔다. 영세한 곳은 A4지에 출력해서 가위로 직접 잘라다가 풀로 붙여야 할 정도로 돈이 없을 수 있지 않을까 하는 생각까지 하고 있었는데 막상 끝까지 들어보니 라벨지라고 하는 미리 사각형 모양으로 홈이 파져 있어 인쇄한 뒤 그 부분만 쉽게 떼낼 수 있는 스티커 종이에 인쇄해 달라는 요청이었다. 그러면 인쇄 후에 바코드 부분만 떼서 바로바로 상자에 붙이면 된다. 그리고 이 기능을 구현하는 과정도 역시 노가다였다. 막상 인쇄기능을 추가하려고 보니 라벨지도 종류마다 조금씩 홈이 파여진 위치나 사이즈가 달랐다. 결국 사용자가 자신이 쓰는 라벨지에 맞게 출력할 수 있도록 + - 버튼 여러개를 추가해서 상하좌우와 간격을 조정할 수 있게 UI를 구성했다. 그리고 당연히 <strong>Internet Explorer</strong>에서는 의도한 대로 작동하지 않아서 작업을 또 따로 해야했다. 솔직히 크로스브라우징(대부분 IE대응)이 제일 힘들었던 것 같다. 프로그램을 짜면서 그것만 아니었어도 벌써 끝냈을 거라는 생각이 수없이 많이 들었다. 빨리 세상에서 IE가 없어졌으면 좋겠다.</p><p>그 다음엔 라벨지는 8칸이 있는데 그 중에 3개만 출력하는 식으로 썼을 때 남은 라벨지를 버리면 아까우니까 다음에 출력할 때 쓰고 남은 라벨지를 쓸 수 있도록 바코드가 시작되는 칸을 사용자가 지정할 수 있게 해달라는 식으로 요청이 몇 개 더 왔던 것으로 기억한다. 다 만들었다고 생각했을 때마다 또 새로운 기능이 추가되었다.</p><p>프로젝트를 진행하면서 3월 말부터는 jQuery 노가다에 한계를 느꼈기 때문에 웹 프론트엔드 쪽에 관심을 가지고 퇴근후에 기술습득을 시작했다. 정확히 기억은 나지 않지만 상황이 어떻게 돌아가는지 파악부터 했던 것 같다. <a href="https://steemit.com/javascript/@march23hare/javascript" target="_blank" rel="noopener">구닥다리 공룡을 위한 오늘날의 JavaScript</a> 같은 글이 큰 도움이 되었다. 시간 날 때마다 인터넷에서 개발 관련 글을 찾아읽는 습관이 어디부터 시작할 지에 정하는데 도움이 되었다고 생각한다.</p><blockquote><p><a href="http://readtrend.com/" target="_blank" rel="noopener">readtrend</a>, <a href="https://devnews.kr/" target="_blank" rel="noopener">devnews</a>, <a href="https://www.popit.kr/" target="_blank" rel="noopener">Popit</a>, <a href="https://okky.kr/" target="_blank" rel="noopener">OKKY</a> 같은 곳에서 글을 주로 찾아 읽었다.</p></blockquote><p>난 그저 패키지 매니져로 멋지게 라이브러리를 설치해보고 싶을 뿐이었지만 그걸 쓰려고 하는 순간 수많은 것들이 딸려나왔다. 그 뒤로 수많은 블로그 글을 찾아보고 직접 세팅도 해보면서 학습을 진행했다.</p><blockquote><p>당신은 바나나를 원했지만 실제로는 바나나를 들고 있는 고릴라와 정글 전체를 얻고 말았다.</p><footer><strong>- Joe Armstrong</strong></footer></blockquote><p>이것은 OOP에 대한 것이지만 모던 자바스크립트 생태계에서도 어느정도 적용되지 않을까 싶다.</p><h4 id="5-12월"><a href="#5-12월" class="headerlink" title="5 ~ 12월"></a>5 ~ 12월</h4><h6 id="…"><a href="#…" class="headerlink" title="…"></a>…</h6><p>서울 쪽에서 진행하는 어디 회사 차세대 프로젝트에 참여하게 되었다. 분위기상 내년 2월 말 쯤에는 망했다는 소리가 나올것 같은데 아니면 뭐 그냥 잘 쓰고 있을 수도 있고 이제는 아무래도 상관없다. 지난 8개월을 굳이 글로 적을 기분이 아니라 트윗으로 대신하기로 한다.</p><blockquote><p>시작부터 느낌이 안좋았는데 JSP 화면코드부터 SQL 프로시저 호출까지 정말 괴상한 방식으로 짜게 되었다. 들여쓰기가 스페이스 3칸이었다.<br><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/nameEO/status/1009437074460532736" target="_blank" rel="noopener"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br>화면 단 부터 데이터베이스 단까지 모든 영역 코드를 섞어서 짜게 되었다. 시작부터 코드 퀄리티가 땅을 기었다.<br><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/nameEO/status/1012558410343055360" target="_blank" rel="noopener"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br>서버와 DB쪽의 방해로 JSON 포멧을 제대로 쓸 수가 없었고 코딩 스타일이 너무 이상해서 힘들었다. 차라리 대학에서 조별과제 하던 때가 나았던 것 같다.<br><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/nameEO/status/1016621225915789312" target="_blank" rel="noopener"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br>내가 참여했던 클라이언트 쪽도 이렇지만 서버쪽은 더 난장판이었다.</p></blockquote><p>여기다 더 이상 이 프로젝트에 대해 구구절절 적고싶지 않다. 회고를 하면서 마음 속에 묻어버리기로 했다. 생각해보면 나도 잘못한 것이 많았다.</p><h2 id="이직"><a href="#이직" class="headerlink" title="이직"></a>이직</h2><p>결국 이직을 했다. 위의 프로젝트를 하면서 모든 기대를 버리고 이직할 곳을 찾기 시작했는데 지인의 지인의 회사에 운좋게 들어가게 되었다. 이직할 회사 쪽과 주말에 만나 간단하게 이야기를 나누었는데 회사의 사업모델과 사용중인 기술스택전반, 그리고 현재 회사상황에 대한 것들을 들었다. 그리고 나도 면접보는 기분으로 내가 아는 것들을 성실하게 이야기 했다. 이번 년도 동안 개인적으로 열심히 공부했던 것들이 여기서 도움이 되었다. 마지막으로 이전 회사 연봉을 말했더니 심하다면서 천만원넘게 올려주었다. 아마 좋은 곳인 것 같다. 출근은 내년이라 아직 무슨일이 일어날지 모르지만 할 수 있는 만큼 열심히 일하고 싶다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><blockquote><p>회고를 쓰는건 처음이라 다른 분들의 회고를 보이는대로 싹 읽어서 나름 구조 정리도 해보고 키워드도 뽑아보았다. 다음번엔 이 중에 몇가지를 골라서 무난하게 쓸 수 있지 않을까 하는 생각을 했다.<br><img src="/2018/12/30/retrospect-2018/reading.png" title="reading..."><br><code>졸업, 창업, 취업, 퇴직, 이직, 블로그, 기술, 개인/사내 프로젝트 경험, 커뮤니티, 컨퍼런스, 대회, 강의, 강좌, 학습, 학원, Github activity, 일일커밋, 오픈소스, 세미나, 발표, 모임, 독서, 여행, 운동</code></p></blockquote><p>회사라는 곳이 배우러 가는 곳이 아니라 일하러 가는 곳이니만큼 꼭 뭔가 얻어가지 않았더라도(월급은 얻어감) 어쩔 수 없다는 생각이 들었다. 그래도 3월 말부터 시작했던 웹 프론트엔드 학습에 어느정도 진전이 있었다는 것을 위안삼기로 했다. 최신 자바스크립트 문법과 Webpack 세팅에도 어느정도 익숙해졌지만 혼자서 공부하려니 시행착오가 너무 많았고 실제 현장에서 써볼 기회가 없어서 아직은 제대로된 지식이 아니라고 생각한다. 지금 생각해보니 문제는 React나 Vue쪽을 공부하지 않은 것이다. 실제 일할 때는 jQuery만 썼고 앞으로도 계속 그럴거라고 생각해서 그랬지만 좀 후회된다. 하다보니 백엔드 쪽도 같이 공부하게 되었다. 처음엔 PHP 환경에서 테스트를 하다가 나중에 Express로 바꾸면서 Node.js 쪽도 관심이 생겨 찾아보았다. 앞으로는 Node.js를 이용한 API 서버 구축과 React 라이브러리 사용방법 쪽을 알아볼 계획이다.</p><p>이 회고 비슷한 것을 작성하면서 개인의 기억력이라는 것이 얼마나 부질없는 것인지 좀 더 확실하게 깨닫게 되었다. 일기까지 쓸 필요는 없지만 중간중간 있었던 일을 글 형태로 정리해야겠다는 생각이 들었고 이번 한해는 정말 순식간에 지나갔다고 느낄 정도로 기억이 많이 남아있지 않다. 계속 이런식으로 뒤돌아보니 크게 한 게 없었다는 식으로 살면 망하겠다는 사실을 이 글을 작성하면서 느끼게 되었다.</p><p>내년에는 운동을 하고, 코드도 많이 짜고, 블로그 글도 좋지만 굳이 책을 좀 찾아서 읽고, 그리고 뭐하지…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017년 회고를 쓴게 언제인지도 기억나지 않는데(안썼으니까) 그래서인지 2018년을 돌아보는 이번 회고는 더욱 각별하다. 글을 쓰며 지나간 한 해를 되짚어 보는 일에서 무언가 의미있는 것은 발견하진 못했지만 그동안 겪었던 고통들을 재발견 하였다
      
    
    </summary>
    
    
      <category term="회고" scheme="https://nameeo.github.io/tags/%ED%9A%8C%EA%B3%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo로 블로그를 만들어 보았다.</title>
    <link href="https://nameeo.github.io/2018/12/10/setup-hexo/"/>
    <id>https://nameeo.github.io/2018/12/10/setup-hexo/</id>
    <published>2018-12-10T13:07:49.000Z</published>
    <updated>2018-12-22T12:29:01.177Z</updated>
    
    <content type="html"><![CDATA[<p>윈도우 환경에서 정적 사이트 생성기인 <a href="https://hexo.io/ko/" target="_blank" rel="noopener">Hexo</a>를 사용하여 블로그를 만들어 보기로 했다.<br>Hexo를 선택한 이유는 자바스크립트를 사용하면서도 간단해 보였기 때문이다.</p><blockquote><p><a href="https://www.staticgen.com/" target="_blank" rel="noopener">StaticGen</a>에서 수많은 정적 사이트 생성기를 찾아볼 수 있다.</p></blockquote><p>앞으로 블로그를 운영하면서 계속 사용할 것이므로 자잘한 환경설정도 같이 해보았다.<br>생성한 사이트는 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>에 배포했다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><h4 id="Hexo-설치"><a href="#Hexo-설치" class="headerlink" title="Hexo 설치"></a>Hexo 설치</h4><p>먼저 윈도우 환경에서 Git과 Node.js는 인스톨러를 사용해 쉽게 설치할 수 있다.<br>Node.js를 설치하면 npm도 같이 설치된다.</p><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git 다운로드</a></li><li><a href="https://nodejs.org/ko/download/" target="_blank" rel="noopener">Node.js 다운로드</a></li></ul><p>npm으로 Hexo를 설치한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>초기화할 폴더명을 지정해서 초기화한다. 폴더명은 <strong>blog</strong>로 하기로 했다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo init blog</span><br></pre></td></tr></table></figure></p><p>설치가 끝나면 해당 폴더에 폴더 구조가 생성된 것을 볼 수 있다.</p><h4 id="테마-설치"><a href="#테마-설치" class="headerlink" title="테마 설치"></a>테마 설치</h4><p>기본으로 설치되는 테마는 우주가 느껴지는 무난한 테마이다.<br>Hexo 공식 사이트의 <a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">Themes</a>에서 마음에 드는 테마를 골라서 설치하기로 했다.<br>데모는 데모 페이지 뿐만 아니라 사용중이거나 페이지를 찾을 수 없는 경우가 섞여있어서 비교하기가 다소 힘들다.</p><p>테마는 Git을 이용하여 <code>clone</code>하거나 테마의 Github 저장소에서 ZIP 파일로 다운받아 <strong>themes</strong>폴더에 넣으면 된다.</p><blockquote><p>ZIP 파일로 다운받는 것을 추천한다…<br><img src="/2018/12/10/setup-hexo/img2.png" title="zip_download"></p></blockquote><p>이번에는 <a href="https://github.com/Dreyer/hexo-theme-artemis" target="_blank" rel="noopener">Artemis</a> 테마를 골랐다.<br>테마를 설치할 때 폴더명을 짧게 변경해주면 좋다.</p><pre>hexo-theme-artemis-master -> <b>artemis</b></pre><p>테마에 따라 추가적으로 패키지를 설치해야 할 수도 있다. 테마가 있는 저장소의 문서를 잘 읽어보자.<br>이번에 선택한 테마는 다음과 같은 의존 패키지 설치가 필요하다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-pug hexo-generator-feed hexo-generator-sitemap</span><br></pre></td></tr></table></figure></p><h2 id="설정파일-수정"><a href="#설정파일-수정" class="headerlink" title="설정파일 수정"></a>설정파일 수정</h2><blockquote><p>글 작성환경 세팅겸 주로 쓰는 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a>로 폴더를 열어서 편집하기로 했다.<br><img src="/2018/12/10/setup-hexo/img1.png" title="editor_view">  </p></blockquote><p>생성된 폴더에서 <code>_config.yml</code>파일을 열고 필요한 부분을 수정했다.<br><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">blog</span> <span class="comment">#사이트 제목</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">blog</span> <span class="comment">#사이트 설명</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">nameEO</span> <span class="comment"># 작성자 이름</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://nameeo.github.io</span> <span class="comment">#사이트 URL</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment">#포스트를 생성할 때 포스트마다 asset을 저장할 별도 폴더 생성</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">artemis</span> <span class="comment">#테마</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span> <span class="comment">#배포설정</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/nameEO/nameeo.github.io.git</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></p><h2 id="생성하기"><a href="#생성하기" class="headerlink" title="생성하기"></a>생성하기</h2><p>로컬 서버를 실행해서 결과물을 보면서 편집할 수 있다. 파일 내용이 바뀔 때마다 자동으로 반영된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo server</span><br></pre></td></tr></table></figure></p><h2 id="테마수정"><a href="#테마수정" class="headerlink" title="테마수정"></a>테마수정</h2><p>Artemis 테마는 <strong>Sass(SCSS)</strong> CSS 전처리기를 사용하고 있기 때문에 스타일을 변경하려면 환경설정이 더 필요했다.</p><p>우선 <strong>Ruby</strong>를 설치한다. 윈도우 환경에서는 <a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">인스톨러</a>가 있다.<br>그 뒤 <strong>Ruby Sass</strong>를 설치한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; gem install sass</span><br></pre></td></tr></table></figure></p><pre>Ruby Sass는 권장되는 Sass 구현체는 아니라고 한다.(deprecated)</pre><p>그 다음 <strong>theme/artemis</strong> 폴더로 가서 의존 패키지를 설치했다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install</span><br></pre></td></tr></table></figure></p><p>이제 테마에 있는 파일을 수정한 뒤에 <code>build</code> 스크립트를 실행하면 반영될 것이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm run build</span><br></pre></td></tr></table></figure></p><blockquote><p>수시로 build 하거나 특정 폴더 내부에 있는 npm 스크립트를 실행할 때<br>VS Code에 npm 스크립트를 자동으로 감지하는 기능이 있어서 편리했다.<br>자주쓰는 기능도 몇 개 등록해서 사용 중이다.<br><img src="/2018/12/10/setup-hexo/img3.png" title="task_autodetect"></p></blockquote><p>테마 폴더에도 <code>_config.yml</code>파일이 있다. 필요하다면 추가적으로 변경한다.</p><h2 id="포스트작성"><a href="#포스트작성" class="headerlink" title="포스트작성"></a>포스트작성</h2><h4 id="글쓰기"><a href="#글쓰기" class="headerlink" title="글쓰기"></a>글쓰기</h4><p>제목이 <em>post-name</em>인 새 포스트를 생성하려면 아래와 같이 입력한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post-name</span><br></pre></td></tr></table></figure></p><pre>`post`는 Hexo의 기본 레이아웃이다.</pre><p><strong>source/_posts</strong>에 <em>post-name.md</em> 파일이 생성된다. 서버를 켜고 파일을 편집하며 작성한다.<br>마크다운 형식이 아직 익숙하지 않지만 크게 어렵진 않은 것 같다.<br>또한 Hexo에서는 <a href="https://hexo.io/ko/docs/tag-plugins" target="_blank" rel="noopener">Tag Plugins</a>를 지원한다</p><h4 id="이미지-추가"><a href="#이미지-추가" class="headerlink" title="이미지 추가"></a>이미지 추가</h4><p>이미지 등의 Asset은 <em>source/images</em> 같은 폴더를 만들어서 추가하거나, Post Asset 폴더를 사용한다.<br>Post Asset 폴더를 사용 시에는 Include Assets 태그를 사용해야 한다고 한다.</p><blockquote><p>Post Asset 폴더 사용 시 이미지 이름이 <em>img-name.png</em> 이고 title 속성이 <em>image-title</em> 일 때<br>Include Assets 태그는,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img img-name.png image-title %&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p>전역 이미지 폴더보다 이미지를 포스트마다 나눠두는 것을 선호해서 Post Asset 폴더를 사용했다.<br>이 상태에서 공통으로 쓰는 이미지는 전역 이미지 폴더에 놔두는 식으로 사용하면 좋다고 한다.</p><h2 id="배포"><a href="#배포" class="headerlink" title="배포"></a>배포</h2><p>GitHub Pages에 배포할 생각이라 <code>_config.yml</code>에 Git으로 배포하게 세팅했다.</p><p>배포를 위해 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>을 설치한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>사이트를 생성한 후 바로 배포했다. <strong>public</strong>폴더의 내용만 Git에 커밋되는 것 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo deploy --generate</span><br></pre></td></tr></table></figure></p><p>배포하면 몇 분 안에 실제 사이트에도 적용이 된다.</p><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><p><a href="https://hexo.io/ko/docs/" target="_blank" rel="noopener">Hexo 문서 (한국어)</a><br><a href="https://futurecreator.github.io/2016/06/14/get-started-with-hexo/" target="_blank" rel="noopener">워드프레스보다 쉬운 Hexo 블로그 시작하기</a><br><a href="https://futurecreator.github.io/2016/06/21/hexo-basic-usage/" target="_blank" rel="noopener">Hexo 기본 사용법</a><br><a href="https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/" target="_blank" rel="noopener">Github Page와 Hexo를 통해 30분만에 기술 블로그 만들기</a><br><a href="https://tbr74.github.io/2017/07/09/Study-Hexo-2017-07-09-hexo-markdown/" target="_blank" rel="noopener">Hexo에서 마크다운(markdown) 사용하기</a><br><a href="https://hyunseob.github.io/2016/02/23/start-hexo/" target="_blank" rel="noopener">Hexo 시작하기</a><br><a href="https://seongbin9786.github.io/2018/01/01/Hexo%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/" target="_blank" rel="noopener">Hexo를 이용한 Github 블로그 만들기</a><br><a href="http://recoveryman.tistory.com/276" target="_blank" rel="noopener">[사스(Sass)] 1. Sass 란 무엇인지 + 설치</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;윈도우 환경에서 정적 사이트 생성기인 &lt;a href=&quot;https://hexo.io/ko/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;를 사용하여 블로그를 만들어 보기로 했다.&lt;br&gt;Hexo를 선택한 이유는 자바스크립트
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://nameeo.github.io/2018/11/29/hello-world/"/>
    <id>https://nameeo.github.io/2018/11/29/hello-world/</id>
    <published>2018-11-29T03:00:00.000Z</published>
    <updated>2018-12-29T18:19:29.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="블로그-생성"><a href="#블로그-생성" class="headerlink" title="블로그 생성"></a>블로그 생성</h2><p>배포 완료</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;블로그-생성&quot;&gt;&lt;a href=&quot;#블로그-생성&quot; class=&quot;headerlink&quot; title=&quot;블로그 생성&quot;&gt;&lt;/a&gt;블로그 생성&lt;/h2&gt;&lt;p&gt;배포 완료&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
